/* SPDX-License-Identifier: GPL-2.0-or-later */
/*
 * Definitions and platform data for Analog Devices
 * ADP5520/ADP5501 MFD PMICs (Backlight, LED, GPIO and Keys)
 *
 * Copyright 2009 Analog Devices Inc.
 */


#ifndef __LINUX_MFD_ADP5520_H
#define __LINUX_MFD_ADP5520_H

#define ID_ADP5520		5520
#define ID_ADP5501		5501

/*
 * ADP5520/ADP5501 Register Map
 */

#define ADP5520_MODE_STATUS 		0x00
#define ADP5520_INTERRUPT_ENABLE 	0x01
#define ADP5520_BL_CONTROL 		0x02
#define ADP5520_BL_TIME 		0x03
#define ADP5520_BL_FADE 		0x04
#define ADP5520_DAYLIGHT_MAX 		0x05
#define ADP5520_DAYLIGHT_DIM 		0x06
#define ADP5520_OFFICE_MAX 		0x07
#define ADP5520_OFFICE_DIM 		0x08
#define ADP5520_DARK_MAX 		0x09
#define ADP5520_DARK_DIM 		0x0A
#define ADP5520_BL_VALUE 		0x0B
#define ADP5520_ALS_CMPR_CFG 		0x0C
#define ADP5520_L2_TRIP 		0x0D
#define ADP5520_L2_HYS 			0x0E
#define ADP5520_L3_TRIP 		0x0F
#define ADP5520_L3_HYS 			0x10
#define ADP5520_LED_CONTROL 		0x11
#define ADP5520_LED_TIME 		0x12
#define ADP5520_LED_FADE 		0x13
#define ADP5520_LED1_CURRENT 		0x14
#define ADP5520_LED2_CURRENT 		0x15
#define ADP5520_LED3_CURRENT 		0x16

/*
 * ADP5520 Register Map
 */

#define ADP5520_GPIO_CFG_1 		0x17
#define ADP5520_GPIO_CFG_2 		0x18
#define ADP5520_GPIO_IN 		0x19
#define ADP5520_GPIO_OUT 		0x1A
#define ADP5520_GPIO_INT_EN 		0x1B
#define ADP5520_GPIO_INT_STAT 		0x1C
#define ADP5520_GPIO_INT_LVL 		0x1D
#define ADP5520_GPIO_DEBOUNCE 		0x1E
#define ADP5520_GPIO_PULLUP 		0x1F
#define ADP5520_KP_INT_STAT_1 		0x20
#define ADP5520_KP_INT_STAT_2 		0x21
#define ADP5520_KR_INT_STAT_1 		0x22
#define ADP5520_KR_INT_STAT_2 		0x23
#define ADP5520_KEY_STAT_1 		0x24
#define ADP5520_KEY_STAT_2 		0x25

/*
 * MODE_STATUS bits
 */

#define ADP5520_nSTNBY		(1 << 7)
#define ADP5520_BL_EN           (1 << 6)
#define ADP5520_DIM_EN          (1 << 5)
#define ADP5520_OVP_INT         (1 << 4)
#define ADP5520_CMPR_INT        (1 << 3)
#define ADP5520_GPI_INT         (1 << 2)
#define ADP5520_KR_INT          (1 << 1)
#define ADP5520_KP_INT          (1 << 0)

/*
 * INTERRUPT_ENABLE bits
 */

#define ADP5520_AUTO_LD_EN      (1 << 4)
#define ADP5520_CMPR_IEN        (1 << 3)
#define ADP5520_OVP_IEN         (1 << 2)
#define ADP5520_KR_IEN          (1 << 1)
#define ADP5520_KP_IEN          (1 << 0)

/*
 * BL_CONTROL bits
 */

#define ADP5520_BL_LVL          ((x) << 5)
#define ADP5520_BL_LAW          ((x) << 4)
#define ADP5520_BL_AUTO_ADJ     (1 << 3)
#define ADP5520_OVP_EN          (1 << 2)
#define ADP5520_FOVR            (1 << 1)
#define ADP5520_KP_BL_EN        (1 << 0)

/*
 * ALS_CMPR_CFG bits
 */

#define ADP5520_L3_OUT		(1 << 3)
#define ADP5520_L2_OUT		(1 << 2)
#define ADP5520_L3_EN		(1 << 1)

#define ADP5020_MAX_BRIGHTNESS	0x7F

#define FADE_VAL(in, out)	((0xF & (in)) | ((0xF & (out)) << 4))
#define BL_CTRL_VAL(law, auto)	(((1 & (auto)) << 3) | ((0x3 & (law)) << 4))
#define ALS_CMPR_CFG_VAL(filt, l3_en)	(((0x7 & filt) << 5) | l3_en)

/*
 * LEDs subdevice bits and masks
 */

#define ADP5520_01_MAXLEDS 3

#define ADP5520_FLAG_LED_MASK 		0x3
#define ADP5520_FLAG_OFFT_SHIFT 	8
#define ADP5520_FLAG_OFFT_MASK 		0x3

#define ADP5520_R3_MODE		(1 << 5)
#define ADP5520_C3_MODE		(1 << 4)
#define ADP5520_LED_LAW		(1 << 3)
#define ADP5520_LED3_EN		(1 << 2)
#define ADP5520_LED2_EN		(1 << 1)
#define ADP5520_LED1_EN		(1 << 0)

/*
 * GPIO subdevice bits and masks
 */

#define ADP5520_MAXGPIOS	8

#define ADP5520_GPIO_C3		(1 << 7)	/* LED2 or GPIO7 aka C3 */
#define ADP5520_GPIO_C2		(1 << 6)
#define ADP5520_GPIO_C1		(1 << 5)
#define ADP5520_GPIO_C0		(1 << 4)
#define ADP5520_GPIO_R3		(1 << 3)	/* LED3 or GPIO3 aka R3 */
#define ADP5520_GPIO_R2		(1 << 2)
#define ADP5520_GPIO_R1		(1 << 1)
#define ADP5520_GPIO_R0		(1 << 0)

struct adp5520_gpio_platform_data {
	unsigned gpio_start;
	u8 gpio_en_mask;
	u8 gpio_pullup_mask;
};

/*
 * Keypad subdevice bits and masks
 */

#define ADP5520_MAXKEYS	16

#define ADP5520_COL_C3 		(1 << 7)	/* LED2 or GPIO7 aka C3 */
#define ADP5520_COL_C2		(1 << 6)
#define ADP5520_COL_C1		(1 << 5)
#define ADP5520_COL_C0		(1 << 4)
#define ADP5520_ROW_R3		(1 << 3)	/* LED3 or GPIO3 aka R3 */
#define ADP5520_ROW_R2		(1 << 2)
#define ADP5520_ROW_R1		(1 << 1)
#define ADP5520_ROW_R0		(1 << 0)

#define ADP5520_KEY(row, col) (col + row * 4)
#define ADP5520_KEYMAPSIZE	ADP5520_MAXKEYS

struct adp5520_keys_platform_data {
	int rows_en_mask;		/* Number of rows */
	int cols_en_mask;		/* Number of columns */
	const unsigned short *keymap;	/* Pointer to keymap */
	unsigned short keymapsize;	/* Keymap size */
	unsigned repeat:1;		/* Enable key repeat */
};


/*
 * LEDs subdevice platform data
 */

#define FLAG_ID_ADP5520_LED1_ADP5501_LED0 	1	/* ADP5520 PIN ILED */
#define FLAG_ID_ADP5520_LED2_ADP5501_LED1 	2	/* ADP5520 PIN C3 */
#define FLAG_ID_ADP5520_LED3_ADP5501_LED2 	3	/* ADP5520 PIN R3 */

#define ADP5520_LED_DIS_BLINK	(0 << ADP5520_FLAG_OFFT_SHIFT)
#define ADP5520_LED_OFFT_600ms	(1 << ADP5520_FLAG_OFFT_SHIFT)
#define ADP5520_LED_OFFT_800ms	(2 << ADP5520_FLAG_OFFT_SHIFT)
#define ADP5520_LED_OFFT_1200ms	(3 << ADP5520_FLAG_OFFT_SHIFT)

#define ADP5520_LED_ONT_200ms	0
#define ADP5520_LED_ONT_600ms	1
#define ADP5520_LED_ONT_800ms	2
#define ADP5520_LED_ONT_1200ms	3

struct adp5520_leds_platform_data {
	int num_leds;
	struct led_info	*leds;
	u8 fade_in;		/* Backlight Fade-In Timer */
	u8 fade_out;		/* Backlight Fade-Out Timer */
	u8 led_on_time;
};

/*
 * Backlight subdevice platform data
 */

#define ADP5520_FADE_T_DIS	0	/* Fade Timer Disabled */
#define ADP5520_FADE_T_300ms	1	/* 0.3 Sec */
#define ADP5520_FADE_T_600ms	2
#define ADP5520_FADE_T_900ms	3
#define ADP5520_FADE_T_1200ms	4
#define ADP5520_FADE_T_1500ms	5
#define ADP5520_FADE_T_1800ms	6
#define ADP5520_FADE_T_2100ms	7
#define ADP5520_FADE_T_2400ms	8
#define ADP5520_FADE_T_2700ms	9
#define ADP5520_FADE_T_3000ms	10
#define ADP5520_FADE_T_3500ms	11
#define ADP5520_FADE_T_4000ms	12
#define ADP5520_FADE_T_4500ms	13
#define ADP5520_FADE_T_5000ms	14
#define ADP5520_FADE_T_5500ms	15	/* 5.5 Sec */

#define ADP5520_BL_LAW_LINEAR 	0
#define ADP5520_BL_LAW_SQUARE 	1
#define ADP5520_BL_LAW_CUBIC1 	2
#define ADP5520_BL_LAW_CUBIC2 	3

#define ADP5520_BL_AMBL_FILT_80ms 	0	/* Light sensor filter time */
#define ADP5520_BL_AMBL_FILT_160ms 	1
#define ADP5520_BL_AMBL_FILT_320ms 	2
#define ADP5520_BL_AMBL_FILT_640ms 	3
#define ADP5520_BL_AMBL_FILT_1280ms 	4
#define ADP5520_BL_AMBL_FILT_2560ms 	5
#define ADP5520_BL_AMBL_FILT_5120ms 	6
#define ADP5520_BL_AMBL_FILT_10240ms 	7	/* 10.24 sec */

	/*
	 * Blacklight current 0..30mA
	 */
#define ADP5520_BL_CUR_mA(I)		((I * 127) / 30)

	/*
	 * L2 comparator current 0..1000uA
	 */
#define ADP5520_L2_COMP_CURR_uA(I)	((I * 255) / 1000)

	/*
	 * L3 comparator current 0..127uA
	 */
#define ADP5520_L3_COMP_CURR_uA(I)	((I * 255) / 127)

struct adp5520_backlight_platform_data {
	u8 fade_in;		/* Backlight Fade-In Timer */
	u8 fade_out;		/* Backlight Fade-Out Timer */
	u8 fade_led_law;	/* fade-on/fade-off transfer characteristic */

	u8 en_ambl_sens;	/* 1 = enable ambient light sensor */
	u8 abml_filt;		/* Light sensor filter time */
	u8 l1_daylight_max;	/* use BL_CUR_mA(I) 0 <= I <= 30 mA */
	u8 l1_daylight_dim;	/* typ = 0, use BL_CUR_mA(I) 0 <= I <= 30 mA */
	u8 l2_office_max;	/* use BL_CUR_mA(I) 0 <= I <= 30 mA */
	u8 l2_office_dim;	/* typ = 0, use BL_CUR_mA(I) 0 <= I <= 30 mA */
	u8 l3_dark_max;		/* use BL_CUR_mA(I) 0 <= I <= 30 mA */
	u8 l3_dark_dim;		/* typ = 0, use BL_CUR_mA(I) 0 <= I <= 30 mA */
	u8 l2_trip;		/* use L2_COMP_CURR_uA(I) 0 <= I <= 1000 uA */
	u8 l2_hyst;		/* use L2_COMP_CURR_uA(I) 0 <= I <= 1000 uA */
	u8 l3_trip;		/* use L3_COMP_CURR_uA(I) 0 <= I <= 127 uA */
	u8 l3_hyst;		/* use L3_COMP_CURR_uA(I) 0 <= I <= 127 uA */
};

/*
 * MFD chip platform data
 */

struct adp5520_platform_data {
	struct adp5520_keys_platform_data *keys;
	struct adp5520_gpio_platform_data *gpio;
	struct adp5520_leds_platform_data *leds;
	struct adp5520_backlight_platform_data *backlight;
};

/*
 * MFD chip functions
 */

extern int adp5520_read(struct device *dev, int reg, uint8_t *val);
extern int adp5520_write(struct device *dev, int reg, u8 val);
extern int adp5520_clr_bits(struct device *dev, int reg, uint8_t bit_mask);
extern int adp5520_set_bits(struct device *dev, int reg, uint8_t bit_mask);

extern int adp5520_register_notifier(struct device *dev,
		 struct notifier_block *nb, unsigned int events);

extern int adp5520_unregister_notifier(struct device *dev,
		struct notifier_block *nb, unsigned int events);

#endif /* __LINUX_MFD_ADP5520_H */
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      /* SPDX-License-Identifier: GPL-2.0-only */
#ifndef __LINUX_MFD_AHC1EC0_H
#define __LINUX_MFD_AHC1EC0_H

#include <linux/device.h>

#define EC_COMMAND_PORT             0x29A /* EC I/O command port */
#define EC_STATUS_PORT              0x299 /* EC I/O data port */

#define EC_RETRY_UDELAY              200 /* EC command retry delay in microseconds */
#define EC_MAX_TIMEOUT_COUNT        5000 /* EC command max retry count */
#define EC_COMMAND_BIT_OBF          0x01 /* Bit 0 is for OBF ready (Output buffer full) */
#define EC_COMMAND_BIT_IBF          0x02 /* Bit 1 is for IBF ready (Input buffer full) */

/* Analog to digital converter command */
#define EC_AD_INDEX_WRITE   0x15 /* Write ADC port number into index */
#define EC_AD_LSB_READ      0x16 /* Read ADC LSB value from ADC port */
#define EC_AD_MSB_READ      0x1F /* Read ADC MSB value from ADC port */

/* Voltage device ID */
#define EC_DID_SMBOEM0      0x28 /* SMBUS/I2C. Smbus channel 0 */
#define EC_DID_CMOSBAT      0x50 /* CMOS coin battery voltage */
#define EC_DID_CMOSBAT_X2   0x51 /* CMOS coin battery voltage*2 */
#define EC_DID_CMOSBAT_X10  0x52 /* CMOS coin battery voltage*10 */
#define EC_DID_5VS0         0x56 /* 5VS0 voltage */
#define EC_DID_5VS0_X2      0x57 /* 5VS0 voltage*2 */
#define EC_DID_5VS0_X10     0x58 /* 5VS0 voltage*10 */
#define EC_DID_5VS5         0x59 /* 5VS5 voltage */
#define EC_DID_5VS5_X2      0x5A /* 5VS5 voltage*2 */
#define EC_DID_5VS5_X10     0x5B /* 5VS5 voltage*10 */
#define EC_DID_12VS0        0x62 /* 12VS0 voltage */
#define EC_DID_12VS0_X2     0x63 /* 12VS0 voltage*2 */
#define EC_DID_12VS0_X10    0x64 /* 12VS0 voltage*10 */
#define EC_DID_VCOREA       0x65 /* CPU A core voltage */
#define EC_DID_VCOREA_X2    0x66 /* CPU A core voltage*2 */
#define EC_DID_VCOREA_X10   0x67 /* CPU A core voltage*10 */
#define EC_DID_VCOREB       0x68 /* CPU B core voltage */
#define EC_DID_VCOREB_X2    0x69 /* CPU B core voltage*2 */
#define EC_DID_VCOREB_X10   0x6A /* CPU B core voltage*10 */
#define EC_DID_DC           0x6B /* ADC. onboard voltage */
#define EC_DID_DC_X2        0x6C /* ADC. onboard voltage*2 */
#define EC_DID_DC_X10       0x6D /* ADC. onboard voltage*10 */

/* Current device ID */
#define EC_DID_CURRENT              0x74

/* ACPI commands */
#define EC_ACPI_RAM_READ            0x80
#define EC_ACPI_RAM_WRITE           0x81

/*
 *  Dynamic control table commands
 *  The table includes HW pin number, Device ID, and Pin polarity
 */
#define EC_TBL_WRITE_ITEM           0x20
#define EC_TBL_GET_PIN              0x21
#define EC_TBL_GET_DEVID            0x22
#define EC_MAX_TBL_NUM              32

/* LED Device ID table */
#define EC_DID_LED_RUN              0xE1
#define EC_DID_LED_ERR              0xE2
#define EC_DID_LED_SYS_RECOVERY     0xE3
#define EC_DID_LED_D105_G           0xE4
#define EC_DID_LED_D106_G           0xE5
#define EC_DID_LED_D107_G           0xE6

/* LED control HW RAM address 0xA0-0xAF */
#define EC_HWRAM_LED_BASE_ADDR      0xA0
#define EC_HWRAM_LED_PIN(N)         (EC_HWRAM_LED_BASE_ADDR + (4 * (N))) // N:0-3
#define EC_HWRAM_LED_CTRL_HIBYTE(N) (EC_HWRAM_LED_BASE_ADDR + (4 * (N)) + 1)
#define EC_HWRAM_LED_CTRL_LOBYTE(N) (EC_HWRAM_LED_BASE_ADDR + (4 * (N)) + 2)
#define EC_HWRAM_LED_DEVICE_ID(N)   (EC_HWRAM_LED_BASE_ADDR + (4 * (N)) + 3)

/* LED control bit */
#define LED_CTRL_ENABLE_BIT()           BIT(4)
#define LED_CTRL_INTCTL_BIT()           BIT(5)
#define LED_CTRL_LEDBIT_MASK            (0x03FF << 6)
#define LED_CTRL_POLARITY_MASK          (0x000F << 0)
#define LED_CTRL_INTCTL_EXTERNAL        0
#define LED_CTRL_INTCTL_INTERNAL        1

#define LED_DISABLE  0x0
#define LED_ON       0x1
#define LED_FAST     0x3
#define LED_NORMAL   0x5
#define LED_SLOW     0x7
#define LED_MANUAL   0xF

#define LED_CTRL_LEDBIT_DISABLE	0x0000
#define LED_CTRL_LEDBIT_ON		0x03FF
#define LED_CTRL_LEDBIT_FAST	0x02AA
#define LED_CTRL_LEDBIT_NORMAL	0x0333
#define LED_CTRL_LEDBIT_SLOW	0x03E0

/* Get the device name */
#define AMI_ADVANTECH_BOARD_ID_LENGTH	32

/*
 * Advantech Embedded Controller watchdog commands
 * EC can send multi-stage watchdog event. System can setup watchdog event
 * independently to make up event sequence.
 */
#define EC_COMMANS_PORT_IBF_MASK	0x02
#define EC_RESET_EVENT				0x04
#define	EC_WDT_START				0x28
#define	EC_WDT_STOP					0x29
#define	EC_WDT_RESET				0x2A
#define	EC_WDT_BOOTTMEWDT_STOP		0x2B

#define EC_HW_RAM					0x89

#define EC_EVENT_FLAG				0x57
#define EC_ENABLE_DELAY_H			0x58
#define EC_ENABLE_DELAY_L			0x59
#define EC_POWER_BTN_TIME_H			0x5A
#define EC_POWER_BTN_TIME_L			0x5B
#define EC_RESET_DELAY_TIME_H		0x5E
#define EC_RESET_DELAY_TIME_L		0x5F
#define EC_PIN_DELAY_TIME_H			0x60
#define EC_PIN_DELAY_TIME_L			0x61
#define EC_SCI_DELAY_TIME_H			0x62
#define EC_SCI_DELAY_TIME_L			0x63

/* EC ACPI commands */
#define EC_ACPI_DATA_READ			0x80
#define EC_ACPI_DATA_WRITE			0x81

/* Brightness ACPI Addr */
#define BRIGHTNESS_ACPI_ADDR		0x50

/* EC HW RAM commands */
#define EC_HW_EXTEND_RAM_READ		0x86
#define EC_HW_EXTEND_RAM_WRITE		0x87
#define	EC_HW_RAM_READ				0x88
#define EC_HW_RAM_WRITE				0x89

/* EC Smbus commands */
#define EC_SMBUS_CHANNEL_SET		0x8A	 /* Set selector number (SMBUS channel) */
#define EC_SMBUS_ENABLE_I2C			0x8C	 /* Enable channel I2C */
#define EC_SMBUS_DISABLE_I2C		0x8D	 /* Disable channel I2C */

/* Smbus transmit protocol */
#define EC_SMBUS_PROTOCOL			0x00

/* SMBUS status */
#define EC_SMBUS_STATUS				0x01

/* SMBUS device slave address (bit0 must be 0) */
#define EC_SMBUS_SLV_ADDR			0x02

/* SMBUS device command */
#define EC_SMBUS_CMD				0x03

/* 0x04-0x24 Data In read process, return data are stored in this address */
#define EC_SMBUS_DATA				0x04

#define EC_SMBUS_DAT_OFFSET(n)	(EC_SMBUS_DATA + (n))

/* SMBUS channel selector (0-4) */
#define EC_SMBUS_CHANNEL			0x2B

/* EC SMBUS transmit Protocol code */
#define SMBUS_QUICK_WRITE			0x02 /* Write Quick Command */
#define SMBUS_QUICK_READ			0x03 /* Read Quick Command */
#define SMBUS_BYTE_SEND				0x04 /* Send Byte */
#define SMBUS_BYTE_RECEIVE			0x05 /* Receive Byte */
#define SMBUS_BYTE_WRITE			0x06 /* Write Byte */
#define SMBUS_BYTE_READ				0x07 /* Read Byte */
#define SMBUS_WORD_WRITE			0x08 /* Write Word */
#define SMBUS_WORD_READ				0x09 /* Read Word */
#define SMBUS_BLOCK_WRITE			0x0A /* Write Block */
#define SMBUS_BLOCK_READ			0x0B /* Read Block */
#define SMBUS_PROC_CALL				0x0C /* Process Call */
#define SMBUS_BLOCK_PROC_CALL		0x0D /* Write Block-Read Block Process Call */
#define SMBUS_I2C_READ_WRITE		0x0E /* I2C block Read-Write */
#define SMBUS_I2C_WRITE_READ		0x0F /* I2C block Write-Read */

/* GPIO control commands */
#define EC_GPIO_INDEX_WRITE			0x10
#define EC_GPIO_STATUS_READ			0x11
#define EC_GPIO_STATUS_WRITE		0x12
#define EC_GPIO_DIR_READ			0x1D
#define EC_GPIO_DIR_WRITE			0x1E

/* One Key Recovery commands */
#define EC_ONE_KEY_FLAG				0x9C

/* ASG OEM commands */
#define EC_ASG_OEM					0xEA
#define EC_ASG_OEM_READ				0x00
#define EC_ASG_OEM_WRITE			0x01
#define EC_OEM_POWER_STATUS_VIN1	0X10
#define EC_OEM_POWER_STATUS_VIN2	0X11
#define EC_OEM_POWER_STATUS_BAT1	0X12
#define EC_OEM_POWER_STATUS_BAT2	0X13

/* GPIO DEVICE ID */
#define EC_DID_ALTGPIO_0			0x10    /* 0x10 AltGpio0 User define gpio */
#define EC_DID_ALTGPIO_1			0x11    /* 0x11 AltGpio1 User define gpio */
#define EC_DID_ALTGPIO_2			0x12    /* 0x12 AltGpio2 User define gpio */
#define EC_DID_ALTGPIO_3			0x13    /* 0x13 AltGpio3 User define gpio */
#define EC_DID_ALTGPIO_4			0x14    /* 0x14 AltGpio4 User define gpio */
#define EC_DID_ALTGPIO_5			0x15    /* 0x15 AltGpio5 User define gpio */
#define EC_DID_ALTGPIO_6			0x16    /* 0x16 AltGpio6 User define gpio */
#define EC_DID_ALTGPIO_7			0x17    /* 0x17 AltGpio7 User define gpio */

/* Lmsensor Chip Register */
#define NSLM96163_CHANNEL			0x02

/* NS_LM96163 address 0x98 */
#define NSLM96163_ADDR				0x98

/* LM96163 index(0x00) Local Temperature (Signed MSB) */
#define NSLM96163_LOC_TEMP			0x00

/* HWMON registers */
#define INA266_REG_VOLTAGE          0x02    /* 1.25mV */
#define INA266_REG_POWER            0x03    /* 25mW */
#define INA266_REG_CURRENT          0x04    /* 1mA */

struct ec_hw_pin_table {
	unsigned int vbat[2];
	unsigned int v5[2];
	unsigned int v12[2];
	unsigned int vcore[2];
	unsigned int vdc[2];
	unsigned int ec_current[2];
	unsigned int power[2];
};

struct ec_dynamic_table {
	unsigned char device_id;
	unsigned char hw_pin_num;
};

struct ec_smbuso_em0 {
	unsigned char hw_pin_num;
};

struct pled_hw_pin_tbl {
	unsigned int pled[6];
};

struct adv_ec_platform_data {
	char *bios_product_name;
	int sub_dev_nb;
	u32 sub_dev_mask;
	struct mutex lock;
	struct device *dev;
	struct class *adv_ec_class;

	struct ec_dynamic_table *dym_tbl;
};

int read_ad_value(struct adv_ec_platform_data *adv_ec_data, unsigned char hwpin,
			unsigned char multi);
int read_acpi_value(struct adv_ec_platform_data *adv_ec_data, unsigned char addr,
			unsigned char *pvalue);
int write_acpi_value(struct adv_ec_platform_data *adv_ec_data, unsigned char addr,
			unsigned char value);
int read_hw_ram(struct adv_ec_platform_data *adv_ec_data, unsigned char addr,
			unsigned char *data);
int write_hw_ram(struct adv_ec_platform_data *adv_ec_data, unsigned char addr,
			unsigned char data);
int write_hwram_command(struct adv_ec_platform_data *adv_ec_data, unsigned char data);
int read_gpio_status(struct adv_ec_platform_data *adv_ec_data, unsigned char PinNumber,
			unsigned char *pvalue);
int write_gpio_stat